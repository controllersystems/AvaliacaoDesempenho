@using AvaliacaoDesempenho.Dominio.BusinessEntities
@model AvaliacaoDesempenho.Models.Avaliacoes.ManterAvaliacaoColaboradorCompetenciasViewModel

@{
    Layout = "~/Views/Shared/_LayoutInterno.cshtml";
}

@Html.Action("CabecalhoColaborador", "Usuarios", new { cicloAvaliacaoSelecionadoID = Model.CicloAvaliacaoSelecionadoID, colaboradorID = Model.ColaboradorID })



<label>Competências</label>
<hr />

@using (Html.BeginForm("ManterAvaliacaoColaboradorCompetencias",
                              "Avaliacoes",
                              FormMethod.Post,
                              new { @class = "form-horizontal", role = "form" }))
{ 
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, string.Empty, new { @class = "text-danger" })
    
    @Html.HiddenFor(model => model.CicloAvaliacaoSelecionadoID)
    @Html.HiddenFor(model => model.GestorRubiID)
    @Html.HiddenFor(model => model.GestorRubiEmpID)
    @Html.HiddenFor(model => model.UsuarioRubiID)
    @Html.HiddenFor(model => model.ColaboradorID)
    @Html.HiddenFor(model => model.LiberadoPraSubmeterAoGestor)
    @Html.HiddenFor(model => model.StatusAvaliacaoColaboradorID)
    @Html.HiddenFor(model => model.StatusCicloAvaliacaoID)
    @Html.HiddenFor(model => model.DataInicioAutoAvaliacao)
    @Html.HiddenFor(model => model.DataTerminoAutoAvaliacao)
    @Html.HiddenFor(model => model.AvaliacaoColaboradorID)

    if (Model.ListaCompetenciasCorporativas != null && Model.ListaCompetenciasCorporativas.Any())
    {
        <div class="row top20">
            <div class="col-md-100">
                <table class="table">
                    <tr>
                        <th>
                            Competências Corporativas
                        </th>
                        <th>
                            Colaborador
                        </th>
                    </tr>
                    @for (int i = 0; i < Model.ListaCompetenciasCorporativas.Count; i++)
                    {
                        if (Model.ListaCompetenciasCorporativas[i].ID.HasValue)
                        {
                            Model.LiberadoPraSubmeterAoGestor = true;
                        }
                        <tr>
                            <td class="col-md-11">
                                @Html.HiddenFor(model => model.ListaCompetenciasCorporativas[i].ID)
                                @Html.HiddenFor(model => model.ListaCompetenciasCorporativas[i].CompentenciaID)
                                @Html.TextAreaFor(model => model.ListaCompetenciasCorporativas[i].Competencia, new { @class = "form-control", @readonly = "readonly" })
                            </td>
                            <td class="col-md-1">
                                @if (Model.StatusAvaliacaoColaboradorID.Equals((int)Enumeradores.StatusAvaliacaoColaborador.AutoAvaliacao))
                                {
                                    if (Model.DataInicioAutoAvaliacao <= DateTime.Today && Model.DataTerminoAutoAvaliacao >= DateTime.Today)
                                    {
                                        @Html.DropDownListFor(model => model.ListaCompetenciasCorporativas[i].NivelColaborador,
                                       new SelectList(Model.ListaNivelAvaliacao,
                                                      "Value",
                                                      "Text",
                                                      Model.ListaCompetenciasCorporativas[i].NivelColaborador),
                                                      " ",
                                                      new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.ListaCompetenciasCorporativas[i].NivelColaborador, string.Empty, new { @class = "text-danger" })
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(model => model.ListaCompetenciasCorporativas[i].NivelColaborador,
                                       new SelectList(Model.ListaNivelAvaliacao,
                                                      "Value",
                                                      "Text",
                                                      Model.ListaCompetenciasCorporativas[i].NivelColaborador),
                                                      " ",
                                                           new { @class = "form-control", @readonly = "readonly" })
                                    }
                                }
                                else
                                {
                                    @Html.DropDownListFor(model => model.ListaCompetenciasCorporativas[i].NivelColaborador,
                                       new SelectList(Model.ListaNivelAvaliacao,
                                                      "Value",
                                                      "Text",
                                                      Model.ListaCompetenciasCorporativas[i].NivelColaborador),
                                                      " ",
                                                      new { @class = "form-control", @readonly = "readonly" })
                                }
                            </td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    }

    if (Model.ListaCompetenciasLideranca != null && Model.ListaCompetenciasLideranca.Any())
    {
        <div class="row top20">
            <div class="col-md-100">
                <table class="table">
                    <tr>
                        <th>
                            Competências de Liderança
                        </th>
                        <th>
                            &nbsp;
                        </th>
                    </tr>

                    @for (int i = 0; i < Model.ListaCompetenciasLideranca.Count; i++)
                    {
                        if (Model.ListaCompetenciasLideranca[i].ID.HasValue)
                        {
                            Model.LiberadoPraSubmeterAoGestor = true;
                        }
                        <tr>
                            <td class="col-md-11">
                                @Html.HiddenFor(model => model.ListaCompetenciasLideranca[i].ID)
                                @Html.HiddenFor(model => model.ListaCompetenciasLideranca[i].CompentenciaID)
                                @Html.TextAreaFor(model => model.ListaCompetenciasLideranca[i].Competencia, new { @class = "form-control", @readonly = "readonly" })
                            </td>
                            <td class="col-md-1">
                                @if (Model.StatusAvaliacaoColaboradorID.Equals((int)Enumeradores.StatusAvaliacaoColaborador.AutoAvaliacao))
                                {
                                    if (Model.DataInicioAutoAvaliacao <= DateTime.Today && Model.DataTerminoAutoAvaliacao >= DateTime.Today)
                                    {
                                        @Html.DropDownListFor(model => model.ListaCompetenciasLideranca[i].NivelColaborador,
                                       new SelectList(Model.ListaNivelAvaliacao,
                                                      "Value",
                                                      "Text",
                                                      Model.ListaCompetenciasLideranca[i].NivelColaborador),
                                                      " ",
                                                      new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.ListaCompetenciasLideranca[i].NivelColaborador, string.Empty, new { @class = "text-danger" })
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(model => model.ListaCompetenciasLideranca[i].NivelColaborador,
                                       new SelectList(Model.ListaNivelAvaliacao,
                                                      "Value",
                                                      "Text",
                                                      Model.ListaCompetenciasLideranca[i].NivelColaborador),
                                                      " ",
                                                           new { @class = "form-control", @readonly = "readonly" })
                                    }
                                }
                                else
                                {
                                    @Html.DropDownListFor(model => model.ListaCompetenciasLideranca[i].NivelColaborador,
                                       new SelectList(Model.ListaNivelAvaliacao,
                                                      "Value",
                                                      "Text",
                                                      Model.ListaCompetenciasLideranca[i].NivelColaborador),
                                                      " ",
                                                      new { @class = "form-control", @readonly = "readonly" })
                                }
                            </td>
                       </tr>
                    }
                </table>
            </div>
        </div>
    }

    if (Model.ListaCompetenciasFuncionais != null && Model.ListaCompetenciasFuncionais.Any())
    {
        <div class="row top20">
            <div class="col-md-100">
                <table class="table">
                    <tr>
                        <th>
                            Competências Funcionais
                        </th>
                        <th>
                            &nbsp;
                        </th>
                    </tr>
                    @for (int i = 0; i < Model.ListaCompetenciasFuncionais.Count; i++)
                    {
                        if (Model.ListaCompetenciasFuncionais[i].ID.HasValue)
                        {
                            Model.LiberadoPraSubmeterAoGestor = true;
                        }
                        <tr>
                            <td class="col-md-11">
                                @Html.HiddenFor(model => model.ListaCompetenciasFuncionais[i].ID)
                                @Html.HiddenFor(model => model.ListaCompetenciasFuncionais[i].CompentenciaID)
                                @Html.TextAreaFor(model => model.ListaCompetenciasFuncionais[i].Competencia, new { @class = "form-control", @readonly = "readonly" })
                            </td>
                            <td class="col-md-1">
                                @if (Model.StatusAvaliacaoColaboradorID.Equals((int)Enumeradores.StatusAvaliacaoColaborador.AutoAvaliacao))
                                {
                                    if (Model.DataInicioAutoAvaliacao <= DateTime.Today && Model.DataTerminoAutoAvaliacao >= DateTime.Today)
                                    {
                                        @Html.DropDownListFor(model => model.ListaCompetenciasFuncionais[i].NivelColaborador,
                                       new SelectList(Model.ListaNivelAvaliacao,
                                                      "Value",
                                                      "Text",
                                                      Model.ListaCompetenciasFuncionais[i].NivelColaborador),
                                                      " ",
                                                      new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.ListaCompetenciasFuncionais[i].NivelColaborador, string.Empty, new { @class = "text-danger" })
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(model => model.ListaCompetenciasFuncionais[i].NivelColaborador,
                                       new SelectList(Model.ListaNivelAvaliacao,
                                                      "Value",
                                                      "Text",
                                                      Model.ListaCompetenciasFuncionais[i].NivelColaborador),
                                                      " ",
                                                           new { @class = "form-control", @readonly = "readonly" })
                                    }
                                }
                                else
                                {
                                    @Html.DropDownListFor(model => model.ListaCompetenciasFuncionais[i].NivelColaborador,
                                       new SelectList(Model.ListaNivelAvaliacao,
                                                      "Value",
                                                      "Text",
                                                      Model.ListaCompetenciasFuncionais[i].NivelColaborador),
                                                      " ",
                                                          new { @class = "form-control", @readonly = "readonly" })
                                }
                            </td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    }

    <div class="row top20">
        <div class="col-md-095 col-md-offset-005 text-right">
            @Html.ActionLink("Anterior", "ManterAvaliacaoColaboradorAutoAvaliacao", new { id = Model.CicloAvaliacaoSelecionadoID, colaboradorID = Model.ColaboradorID, etapaAutoAvaliacao = 1 }, new { @class = "btn btn-default" })

            @if (Model.StatusAvaliacaoColaboradorID == (int)Enumeradores.StatusAvaliacaoColaborador.AutoAvaliacao)
            {
                if (Model.DataInicioAutoAvaliacao <= DateTime.Today && Model.DataTerminoAutoAvaliacao >= DateTime.Today)
                {
                    <input type="submit" value="Salvar" class="btn btn-default" />
                    if (Model.LiberadoPraSubmeterAoGestor)
                    {
                        <input type="submit" value="Submeter ao Gestor" formaction="/Avaliacoes/SubmeterAutoAvaliacaoColaboradorAvaliacaoGestor" class="btn btn-default" />
                    }
                }
            }
        </div>
    </div>
}